var express = require('express');
var app = express();
const http = require('http').Server(app);
const io = require('socket.io')(http);
var port = process.env.PORT || 3000;
var session = require('express-session');
// var cookieParser = require('cookie-parser')
const util = require('util')
var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
var xhttp = new XMLHttpRequest();
const public = require('./controllers/chatPubliclyController');
const private = require('./controllers/chatPrivatelyController');
const announce = require('./controllers/postAnnouncementController');
const share = require('./controllers/shareStatusController');
const sharePhone=require('./controllers/shareEmergencyPhoneNumberController');
const joinCommunity = require('./controllers/joinCommunityController');
const search = require('./controllers/searchController');
const searchHospital = require('./controllers/searchHospitalsController');
const sos = require('./controllers/sosController');
const diagnosis = require('./controllers/diagnosisController');



var path = require('path');
const router = express.Router();
var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
const Message = require('./model/message');

// app.use(cookieParser());
app.use(session({
    secret: 'sb2',
    resave: false,
    saveUninitialized: true,
    cookie: {}
}));

// app.use('/cars', require('./controllers/cars'));
// app.use('/joinControl', require('./controllers/joinCommunityController'));
// app.use('/publicChatControl', require('./controllers/chatPubliclyController'));
// app.use('/shareStatusControl', require("./controllers/shareStatusController"));
// app.use('/privateChatControl', require('./controllers/chatPrivatelyController'));
// app.use('/postAnnouncementControl', require('./controllers/postAnnouncementController'));
// app.use('/searchControl', require('./controllers/searchController'));
app.use(router);

app.use(express.static(path.resolve(__dirname + '/view/public')));

app.get('/', (req, res) => {
    res.sendFile(path.resolve(__dirname + '/view/public/joinCommunity.html'));
});
app.post("/", function (req, res) {
    res.status(200).send("ok");
    // res.send(200, name + " is stored");
});

app.get('/confirmRegister', (req, res) => {
    res.sendFile(path.resolve(__dirname + '/view/public/confirmRegistration.html'));
});


/*************************** Join Community API ***************************/
app.get('/getusers', (req, res) => {
    return joinCommunity.getusers()
        .then((user) => {
            res.end(user);
        });
});
app.post("/login", function (req, res) {
    return joinCommunity.login(req.body.email, req.body.password)
       .then((message) => {
        res.end(message);
       });
});
app.post('/register', (req, res) => {
    return joinCommunity.register(req.body.email, req.body.password)
        .then((message) => {
            res.end(message);
        });
});
app.post("/inactive", function (req, res) {
    return joinCommunity.logout(req.body.userName)
       .then((message) => {
        res.end(message);
       });
});
app.get("/getActiveUsers", function (req, res) {
    return joinCommunity.getActiveUser()
       .then((num) => {
        res.end(num.toString());
       });
});


/*************************** Public Chat API ***************************/
app.get('/messages', (req, res) => {
    return public.messages()
        .then((messages) => {
            res.end(messages);
        });
});
app.post("/message", function (req, res) {
    return public.message(req.body.content, req.body.user)
       .then((message) => {
        res.end(message);
       });
});

/*************************** Private Chat API ***************************/
app.get('/privateWall', (req, res) => {
    return private.privateWall()
        .then((messages) => {
            res.end(messages);
        });
});
app.post("/privateMessage", function (req, res) {
    return private.message(req.body.content, req.body.user, req.body.receiver)
       .then((date) => {
        res.end(date)
       });
});
app.post("/privateMessages", function (req, res) {
    return private.messages(req.body.user, req.body.receiver)
       .then((message) => {
        res.end(message)
       });
});

/*************************** Post Announcement API ***************************/
app.get('/announcements', (req, res) => {
    return announce.getAnnouncements()
        .then((messages) => {
            res.end(messages);
        });
});
app.post("/announcement", function (req, res) {
    return announce.announcement(req.body.user, req.body.content)
        .then((message) => {
            res.end(message);
        }).catch((error)=>{
            res.end(error);
        });
});

/*************************** ShareStatus API ***************************/
app.post("/shareStatus", function (req, res) {
    return share.shareStatus(req.body.username, req.body.lastStatusCode)
       .then((lastStatusCode) => {
        res.end(lastStatusCode)
       });
});

/*************************** SharePhoneNumber API ***************************/
app.post("/sharePhoneNumber", function (req, res) {
    return sharePhone.sharePhoneNumber(req.body.username, req.body.phoneNumber)
       .then((phoneNumber) => {
        res.end(phoneNumber)
       });
});

/*************************** Emergency Helpline API ***************************/
app.get("/helpline",function(req,res){
    return sharePhone.helplineList()
    .then((numbers)=>{
        res.end(numbers);
    });
});

/*************************** Search Information API ***************************/
app.get('/announcements', (req, res) => {
    return search.citizenList(req.body.user, req.body.status)
        .then((messages) => {
            res.end(messages);
        });
});
app.post("/announcement", function (req, res) {
    return search.messageList(req.body.message, req.body.type)
       .then((message) => {
        res.end(message)
       });
});

/*************************** Search Hospital API ***************************/
app.post('/hospital',function(req,res){
    return searchHospital.hospitals(req.body.longitude,req.body.lattitude)
        .then((searchresult) => {
            //console.log(searchresult);
            res.end(searchresult);
        });
});

/*************************** SOS Function API ***************************/
app.post('/updateLocation', (req, res) => {
    return sos.updateLocation(req.body.user, req.body.location)
        .then((location) => {
            res.end(location);
        });
});
app.get("/location", function (req, res) {
    return sos.getLocation()
       .then((location) => {
        res.end(JSON.stringify(location));
       })
       .catch((err)=>{console.log(err)});
});
app.post("/clearLocation", function (req, res) {
    return sos.clearSOS(req.body.user)
       .then((response) => {
        res.end(response);
       })
       .catch((err)=>{console.log(err)});
});
/*************************** Diagnosis API ***************************/

app.post('/addNode', (req, res) => {
    return diagnosis.addNode()
        .then((addNode) => {
            res.end(addNode);
        });
});

app.post('/getCurNode', (req, res) => {
    return diagnosis.getCurNode(req.body.ID)
        .then((getCurNode) => {
            res.end(getCurNode);
        });
});












/*************************** socket io ***************************/


io.on('connection', function (socket) {
    socket.on('chat message', function (msg) {
        io.emit('chat message', msg);
    });
    socket.on('private message notification', function (namepair) {
        io.emit('private message notification', namepair);
    });

    socket.on("new status", function (username, statusCode) {
        io.emit("update status", username, statusCode);
    });
    socket.on('new announcement notification', function () {
        io.emit('new announcement notification', '');
    });
    socket.on('sos', function (stat, sosUser) {
        io.emit('sos', stat, sosUser);
    });
    // To use un comment here...
    // socket.on('disconnect', function () {
    //     var temp = util.inspect(socket.handshake.headers.cookie);
    //     var user = temp.substr(10, temp.indexOf(";"));
    //     console.log('A socket with sessionID: '+util.inspect(socket.handshake.headers.cookie));

    //     console.log('A socket with sessionID: '+ user);
    //     var detail ="{\"userName\":\""+user+"\" }";
    //     xhttp.open("POST", "http://localhost:3000/joinControl/inactive",false);
    //     xhttp.setRequestHeader("Content-type", "application/json");
    //     xhttp.send(detail);


    // });
});

// io.on("connection", function (socket) {
//     console.log("From socket");
//     socket.on("historical message", function () {
//       Message.find({}).sort({ postedAt: 1 }).exec(function (err, messages) {
//         if (err) throw err;

//         // object of all the users
//         console.log(messages);
//         // res.redirect('/TestWall.html');

//         messages.forEach(function (message) {
//           var content = message.content;
//           //console.log(content);
//           var author = message.author;
//           var messageType = message.messageType;
//           var receiver = message.receiver;
//           var postedAt = message.postedAt;
//           socket.emit("show message", content, author, messageType, receiver, postedAt);
//           socket.broadcast.emit("show message", content, author, messageType, receiver, postedAt);
//         });
//       });
//     });


//     socket.on("new message", function (content, author, messageType, receiver, postedAt) {
//       socket.broadcast.emit('show message', content, author, messageType, receiver, postedAt);
//       socket.emit('show message', content, author, messageType, receiver, postedAt);
//     });
// });

// app.listen(3000, () => {
//     console.log("Server Started. http://localhost:3000");
// });
http.listen(port, function () {
    console.log("Server Started. http://localhost:3000");
});